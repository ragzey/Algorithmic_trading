import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt


# Class to handle data fetching and Bollinger Bands calculation
class tickerData:
    def __init__(self, tickers):
        self.tickers = tickers if isinstance(tickers, list) else [tickers]
        self.data = {}  # dict for ticker(key), value(dataframe) pair
        self.bollinger_data = {} # dict for bolinger data

        # Fetch data for all tickers
        for ticker in self.tickers:
            self.data[ticker] = yf.download(ticker)

    def get_data(self, ticker):
        return self.data[ticker]


   # def plotData(self,tickers_to_plot):



    # Method to calculate Bollinger Bands
    #this will also prevent calc of bollinger band if not called
    # this method is not meant to be called by user
    def bg(self, sma):
        if sma not in self.bollinger_data:
            self.bollinger_data[sma] = {}

        for ticker in self.tickers:
            if ticker not in self.bollinger_data[sma]:
                df = self.data[ticker]
                df[f"Close{sma}SMA"] = df["Close"].rolling(window=sma).mean()
                df[f"{sma}SMA2SD"] = df["Close"].rolling(window=sma).std() * 2
                df[f"{sma}SMA+"] = df[f"Close{sma}SMA"] + df[f"{sma}SMA2SD"]
                df[f"{sma}SMA-"] = df[f"Close{sma}SMA"] - df[f"{sma}SMA2SD"]
                # Store result in a dictionary for each ticker
                self.bollinger_data[sma][ticker] = df[[f"Close{sma}SMA", f"{sma}SMA-", f"{sma}SMA+", "Close"]]

        return self.bollinger_data[sma]

    # Plot multiple stocks on the same graph
    def plot_bollinger(self, sma, tickers_to_plot, tail = None):
        # Get Bollinger Bands for tickers to plot (without recalculating if already available)
        bollinger_data = self.bg(sma)

        plt.figure(figsize=(10, 6))

        if len(tickers_to_plot) > 1:  # check if user wants to plot multiple stocks
            for ticker in tickers_to_plot:  # Get Bollinger Bands for each ticker and plot them
                df = bollinger_data[ticker]

                if tail != 0:
                    df = df.tail(tail)

                # Plot closing prices and Bollinger Bands
                plt.plot(df.index, df['Close'], label=f"{ticker} Close", alpha=0.7)
                plt.plot(df.index, df[f"Close{sma}SMA"], label=f"{ticker} {sma} SMA", alpha=0.7)
                plt.fill_between(df.index, df[f"{sma}SMA+"], df[f"{sma}SMA-"], alpha=0.2, label=f"{ticker} Bollinger Bands")

            plt.title(f"Bollinger Bands ({sma}-SMA) for Multiple Stocks")
            plt.xlabel("Date")
            plt.ylabel("Price")
            plt.legend(loc="best")
            plt.grid(True)
            plt.show()

        else:
            ticker = tickers_to_plot[0]
            df = bollinger_data[ticker]

            if tail != 0:
                df = df.tail(tail)

            plt.plot(df.index, df['Close'], label=f"{ticker} Close", alpha=0.7)#plots close
            plt.plot(df.index, df[f"Close{sma}SMA"], label=f"{ticker} {sma} SMA", alpha=0.7)# plot bolinger
            plt.fill_between(df.index, df[f"{sma}SMA+"], df[f"{sma}SMA-"], alpha=0.2)

            plt.title(f"Bollinger Bands for {ticker} given rolling average{sma}")
            plt.xlabel("Date")
            plt.ylabel("Price")
            plt.legend(loc="best")
            plt.grid(True)
            plt.show()

#test

tickers = ['AAPL', 'GOOG', 'MSFT']
stocks = tickerData(tickers)

stocks.plot_bollinger(20,["GOOG"],100 )
